# Read by all shells

# Drop into a tmux terminal if ssh-ing
command -v tmux > /dev/null
if [ "$?" -eq 0 ] && [[ "$OSTYPE" == "linux"* ]]; then
	if [ -z "${TMUX}" ] && [ -n "${SSH_CONNECTION}" ]; then
		tmux attach -t default || tmux new -s default
	elif [ -n "${TMUX}" ]; then
		[ ! -f /etc/motd ] || cat /etc/motd
		function update_ssh_auth_sock() {
			local TO_EXPORT="$(tmux show-environment | grep '^SSH_AUTH_SOCK=')"
			if [ -n "${TO_EXPORT}" ]; then
				export "${TO_EXPORT}"
			fi
		}
		update_ssh_auth_sock
		# Refresh ssh agent forward before invoking sudo
		function sudo() {
			update_ssh_auth_sock
			/usr/bin/sudo "$@"
		}
	fi
fi

# ------------------- Exports -------------------

# General
export GT='https://www.github.com/zwimer/'
export LANG='en_US.UTF-8'

# History
export HISTSIZE=1000000000
export SAVEHIST=1000000000
export HISTFILESIZE=1000000000
if [ -n "${BASH+x}" ]; then
	HISTTIMEFORMAT="%F %T "
fi

# App config
if [ ! -z "${ZSH+x}" ] && [ ! -z "${HOST+x}" ]; then
	export ZSH_COMPDUMP="${ZSH}/cache/.zcompdump-${HOST}"
fi
export FFSEND_HOST='https://send.zwimer.com/'
export LS_COLORS="rs=0:di=01;34:ln=01;35:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;31:"
export LSCOLORS="ExFxCxDxBxegedabagacad"
export DOCKER_SCAN_SUGGEST=false
export DOCKER_CLI_HINTS=false
export DOCKER_BUILDKIT=1
export LESSHISTFILE=-
command -v vim > /dev/null
if [ "${?}" -eq 0 ]; then
	export EDITOR="vim -p"
fi

# ------------------- General purpose -------------------

# Config
tabs -4

# Env
if [[ "${OSTYPE}" == 'darwin'* ]]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
	hash -r
fi

# Default flags
alias g++='g++ -Wall -Wextra -std=c++17'
alias gcc='gcc -Wall -Wextra'
alias objdump='objdump -M intel'
alias octave='octave --no-gui'
alias cling='cling --std=c++17'
alias ls='ls --color'
alias vim='vim -p'
alias mv='mv -i'
alias cp='cp -i --preserve=mode'  # --preserve=mode because GNU cp needs this to clonefile on macOS
alias grep="grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.mypy_cache,__pycache__}"
if [ -d "${HOME}/.cache" ]; then
	alias wget='wget --hsts-file=~/.cache/wget-hsts'
fi

# New commands
alias g='git'
alias la='ls -lA'
alias pva='pv -petab'
alias ctar='tar czvpf'
alias neofetch='neowofetch'
alias today='date "+%-m-%-d"'
alias untar='tar --same-owner -xvf'
alias wdiff='git diff --no-index --word-diff'
alias encrypt-gpg='gpg --symmetric --no-symkey-cache --cipher-algo AES256'
function get_host() { cat /etc/hosts | grep -i "$1"; }
function encrypt() { gpg --symmetric --no-symkey-cache --cipher-algo AES256 -o "$1".gpg "$1"; }

# Quote
alias qargs='quote | xargs -o '
alias qargsJ='quote | xargs -oJ {} '

# Search
alias search='find . | grep -i'
function search2() { (set -u; grep -irl "${1}" .); }

# Avoid accidents
command -v pip > /dev/null
if [ "${?}" -eq 0 ]; then
	function pip() {
		if [[ -z "${VIRTUAL_ENV}" && "$#" -ge 1 && "$1" == "install" ]]; then
			echo "Error: Do not use pip outside of a virtualenv"
			return 1
		else
			\pip3 "${@}"
		fi
	}
	alias pip3=pip
fi

# Configuration virtualenv
command -v python3 > /dev/null
if [ "${?}" -eq 0 ]; then
	command -v virtualenv > /dev/null
	if [ "${?}" -eq 0 ]; then
		if [ "${?}" -eq 0 ]; then
			export WORKON_HOME="${HOME}/.virtualenvs"
			export VIRTUALENVWRAPPER_PYTHON="$(which python3)"
			export VIRTUALENVWRAPPER_VIRTUALENV="$(which virtualenv)"
		fi
		for _VENV_DIR_CHK in "/usr/bin" "/opt/homebrew/bin" "/usr/share/virtualenvwrapper"; do
			if [ -f "${_VENV_DIR_CHK}/virtualenvwrapper_lazy.sh" ]; then
				source "${_VENV_DIR_CHK}/virtualenvwrapper_lazy.sh"
				hash -r
				break
			fi
		done
		unset _VENV_DIR_CHK
	fi
fi

# virtualenv: cli
if [ -d "${WORKON_HOME}/cli/bin/" ]; then
	export PATH="${PATH}:${WORKON_HOME}/cli/bin/"
	hash -r
fi
command -v delayed_rm > /dev/null
if [ "${?}" -eq 0 ]; then
	alias rm='delayed_rm'
fi
command -v sigsleep > /dev/null
if [ "${?}" -eq 0 ]; then
	alias sleep='sigsleep'
fi

# fzf
command -v fzf &> /dev/null
if [ "${?}" -eq 0 ]; then

	# CTRL-/ to toggle small preview window to see the full command
	# CTRL-Y to copy the command into clipboard using pbcopy
	export FZF_CTRL_R_OPTS="
		--preview 'echo {}' --preview-window up:3:hidden:wrap
		--bind 'ctrl-/:toggle-preview'
		--bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
		--color header:italic
		--header 'CTRL-/ toggles preview, CTRL-Y copies to clipboard on macOS'"

	# Print tree structure in the preview window
	export FZF_ALT_C_OPTS="--preview 'tree -C {}'"

	# General Config
	export FZF_COMPLETION_TRIGGER='~~'
	export FZF_COMPLETION_OPTS='--border --info=inline'
	_fzf_comprun() {
		local CMD="${1}"
		shift
		case "${CMD}" in
			cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
			export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
			*)            fzf "$@" ;;
		esac
	}

	# Auto completion and key bindings
	if [[ -n "${ZSH_NAME}" ]]; then
		if [[ "${OSTYPE}" == 'darwin'* ]]; then
			source "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh"
			source "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh"
		elif [[ "$(grep ^ID= /etc/os-release)" == ID=fedora ]]; then
			source /usr/share/zsh/site-functions/_fzf  # Do not autoload this
			source /usr/share/fzf/shell/key-bindings.zsh
		fi
		# Not loading for ubuntu b/c bug: https://github.com/junegunn/fzf/issues/2790
	fi
fi

# Warnings
if [ -f "${HOME}/.profile" ]; then
	echo "Warning: ~/.profile exists"
fi

# Useful functions
function stopwatch() {
	local C=1
	while true; do
		sleep 1
		echo "$C"
		C="$((C+1))"
	done
}

function beep() {
	for i in {1.."$1"}; do
		echo -ne '\007';
		sleep .2
	done
}

# ------------------- OS Specific -------------------

if [[ "${OSTYPE}" == 'darwin'* ]]; then

	# Brew
	export HOMEBREW_NO_INSTALL_UPGRADE=1
	export HOMEBREW_NO_ANALYTICS=1
	export HOMEBREW_NO_ENV_HINTS=1
	export HOMEBREW_BAT=1

	# Aliases
	alias tailscale='/Applications/Tailscale.app/Contents/MacOS/Tailscale'
	alias lsregister="/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister"

	# Checks
	grep 'HISTSIZE=1000000000' /etc/zshrc > /dev/null 2> /dev/null
	if [ "${?}" -ne 0 ]; then
		echo "*** Set history settings in /etc/zshrc ! ***"
	fi

	# Help
	if [[ -n "${ZSH_NAME}" ]]; then
		unalias run-help 2> /dev/null
		autoload run-help
		HELPDIR=/usr/share/zsh/"${ZSH_VERSION}"/help
		alias help=run-help
	fi

	# Fixes
	alias gs="PATH='' gs"
	alias python='python3'
	export RSYNC_OLD_ARGS=1  # Until zsh fixes this: https://www.zsh.org/mla/workers/2022/msg00814.html

	# Fixers
	alias fix-audio="ps aux | grep 'coreaudio[d]' | awk '{print \$2}' | xargs sudo kill"
	alias fix-sudo="sudo gsed -i '2 i auth       sufficient     pam_tid.so' /etc/pam.d/sudo"
	alias fix-zt='sudo bash -c "launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist; launchctl load /Library/LaunchDaemons/com.zerotier.one.plist"'
	alias fix-window-server="sudo killall -HUP WindowServer"

	# Switches
	alias crashreport-on="sudo defaults write com.apple.CrashReporter DialogType crashreport"
	alias crashreport-off="sudo defaults write com.apple.CrashReporter DialogType none"

	# Linux-ish
	function ldd() { otool -L "${1}"; }
	function ip() { ifconfig | grep inet | grep -v '::' | awk '{print $2}'; }
	alias google-chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

	# GNU
	function _add_gnu_paths() {
		local NAME=""
		for NAME in coreutils libtool gnu-tar grep gnu-sed make findutils; do
			local BASE="/opt/homebrew/Cellar/${NAME}"
			local VER="$(/bin/ls "${BASE}/" 2> /dev/null | /usr/bin/tail -n 1)"
			[[ -n "$VER" ]] && export PATH="${BASE}/${VER}/libexec/gnubin:${PATH}"
		done
		hash -r
	}
	_add_gnu_paths
	unset _add_gnu_paths

	# Bat
	export BAT_THEME="ansi"
	alias cat=bat

	# New commands
	function opend() { echo "$1"; cd "$1" && open-by-N.sh -i; cd -; }
	function loudfail() {
		set -E
		trap 'echo FAIL' ERR
	}

	# ccache
	command -v ccache &> /dev/null
	if [ "${?}" -eq 0 ]; then
		export PATH="${HOMEBREW_PREFIX}/opt/ccache/libexec:${PATH}"
	fi
fi

# ------------------- After OS Specific Aliases -------------------

function ip_where() { curl -s "ipinfo.io/${1}/json" | jq -r ".city, .region" | sed -z 's/\n/, /'; }
