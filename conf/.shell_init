# Read by all shells

# ------------------- Exports -------------------

# General
export GT='https://www.github.com/zwimer/'
export LANG='en_US.UTF-8'

# History
export HISTSIZE=1000000000
export SAVEHIST=1000000000
export HISTFILESIZE=1000000000

# App config
if [ ! -z "${ZSH+x}" ] && [ ! -z "${HOST+x}" ]; then
	export ZSH_COMPDUMP="${ZSH}/cache/.zcompdump-${HOST}"
fi
export FFSEND_HOST='https://send.zwimer.com/'
export LSCOLORS='ExFxCxDxBxegedabagacad'
export DOCKER_SCAN_SUGGEST=false
export DOCKER_CLI_HINTS=false
export DOCKER_BUILDKIT=1

# ------------------- OS Specific First -------------------

if [[ "${OSTYPE}" == 'darwin'* ]]; then
	# Brew
	export HOMEBREW_NO_ANALYTICS=1
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# ------------------- General purpose -------------------

# Default flags
alias g++='g++ -Wall -Wextra -std=c++17'
alias gcc='gcc -Wall -Wextra'
alias objdump='objdump -M intel'
alias octave='octave --no-gui'
alias cling='cling --std=c++17'
alias vim='vim -p'
alias mv='mv -i'
alias cp='cp -i'

# New commands
alias g='git'
alias la='ls -lAG'
alias untar='tar --same-owner -xvf'
alias ctar='tar czvpf'
alias today='date "+%-m-%-d"'
alias encrypt-gpg='gpg --symmetric --no-symkey-cache --cipher-algo AES256'
function get_host() { cat /etc/hosts | grep -i "$1"; }
function encrypt() { gpg --symmetric --no-symkey-cache --cipher-algo AES256 -o "$1".gpg "$1"; }

# Quote
alias qargs='quote | xargs -o '
alias qargsJ='quote | xargs -oJ {} '

# Search
alias search='find . | grep -i'
function search2() { (set -u; grep -irl "${1}" .); }

# Avoid accidents
function pip() {
	if [[ -z "${VIRTUAL_ENV}" && "$#" -ge 1 && "$1" == "install" ]]; then
		echo "Error: Do not use pip outside of a virtualenv"
		return 1
	else
		\pip3 "${@}"
	fi
}
alias pip3=pip

# Configuration virtualenv
export WORKON_HOME="${HOME}/.virtualenvs"
command -v virtualenvwrapper.sh > /dev/null
if [ "${?}" -eq 0 ]; then
	export PROJECT_HOME="${HOME}/.mkproject_projects"
	if [[ "${OSTYPE}" == 'darwin'* ]]; then  # macOS
		export VIRTUALENVWRAPPER_PYTHON="${HOMEBREW_PREFIX}/bin/python3"
		export VIRTUALENVWRAPPER_VIRTUALENV="${HOMEBREW_PREFIX}/bin/virtualenv"
		source "${HOMEBREW_PREFIX}/bin/virtualenvwrapper_lazy.sh"
	else  # Linux
		export VIRTUALENVWRAPPER_PYTHON="/usr/bin/python3"
		export VIRTUALENVWRAPPER_VIRTUALENV="/usr/bin/virtualenv"
		[[ -f "/usr/bin/virtualenvwrapper_lazy.sh" ]] \
			&& source "/usr/bin/virtualenvwrapper_lazy.sh" \
			|| source "/usr/share/virtualenvwrapper/virtualenvwrapper_lazy.sh"
	fi
fi

# virtualenv: cli
if [ -d "${WORKON_HOME}/cli/bin/" ]; then
	export PATH="${PATH}:${WORKON_HOME}/cli/bin/"
fi
command -v delayed_rm > /dev/null
if [ "${?}" -eq 0 ]; then
	alias rm='delayed_rm'
fi
command -v sigsleep > /dev/null
if [ "${?}" -eq 0 ]; then
	alias sleep='sigsleep'
fi

# fzf
command -v fzf &> /dev/null
if [ "${?}" -eq 0 ]; then

	# CTRL-/ to toggle small preview window to see the full command
	# CTRL-Y to copy the command into clipboard using pbcopy
	export FZF_CTRL_R_OPTS="
		--preview 'echo {}' --preview-window up:3:hidden:wrap
		--bind 'ctrl-/:toggle-preview'
		--bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
		--color header:italic
		--header 'CTRL-/ toggles preview, CTRL-Y copies to clipboard on macOS'"

	# Print tree structure in the preview window
	export FZF_ALT_C_OPTS="--preview 'tree -C {}'"

	# General Config
	export FZF_COMPLETION_TRIGGER='~~'
	export FZF_COMPLETION_OPTS='--border --info=inline'
	_fzf_comprun() {
		local CMD="${1}"
		shift
		case "${CMD}" in
			cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
			export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
			*)            fzf "$@" ;;
		esac
	}

	# Auto completion and key bindings
	if [[ -n "${ZSH_NAME}" ]]; then
		if [[ "${OSTYPE}" == 'darwin'* ]]; then
			source "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.zsh"
			source "${HOMEBREW_PREFIX}/opt/fzf/shell/key-bindings.zsh"
		elif [[ "$(grep ^ID= /etc/os-release)" == ID=fedora ]]; then
			source /usr/share/zsh/site-functions/fzf  # Do not autoload this
			source /usr/share/fzf/shell/key-bindings.zsh
		fi
		# Not loading for ubuntu b/c bug: https://github.com/junegunn/fzf/issues/2790
	fi
fi

# Useful functions
function stopwatch() {
	local C=1
	while true; do
		sleep 1
		echo "$C"
		C="$((C+1))"
	done
}

# ------------------- OS Specific -------------------

# Temp vars
SI_GREP_ARGS="--color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.mypy_cache,__pycache__}"

if [[ "${OSTYPE}" != 'darwin'* ]]; then
	alias grep="grep ${SI_GREP_ARGS}"
else

	# Checks
	grep 'HISTSIZE=1000000000' /etc/zshrc > /dev/null 2> /dev/null
	if [ "${?}" -ne 0 ]; then
		echo "*** Set history settings in /etc/zshrc ! ***"
	fi

	# Help
	if [[ -n "${ZSH_NAME}" ]]; then
		unalias run-help 2> /dev/null
		autoload run-help
		HELPDIR=/usr/share/zsh/"${ZSH_VERSION}"/help
		alias help=run-help
	fi

	# Fixes
	alias gs="PATH='' gs"
	alias python='python3'
	export RSYNC_OLD_ARGS=1  # Until zsh fixes this: https://www.zsh.org/mla/workers/2022/msg00814.html

	# Fixers
	alias fix-audio="ps aux | grep 'coreaudio[d]' | awk '{print \$2}' | xargs sudo kill"
	alias fix-sudo="sudo gsed -i '2 i auth       sufficient     pam_tid.so' /etc/pam.d/sudo"
	alias fix-zt='sudo bash -c "launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist; launchctl load /Library/LaunchDaemons/com.zerotier.one.plist"'

	# Switches
	alias crashreport-on="sudo defaults write com.apple.CrashReporter DialogType crashreport"
	alias crashreport-off="sudo defaults write com.apple.CrashReporter DialogType none"

	# Linux-ish
	function ldd() { otool -L "${1}"; }
	function ip() { ifconfig | grep inet | grep -v '::' | awk '{print $2}'; }
	alias google-chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

	# GNU
	alias sed="gsed"
	alias find="gfind"
	alias grep="ggrep ${SI_GREP_ARGS}"
	alias cp="gcp -i" # gcp, not cp; because cp -R a/ b differs on BSD cp

	# Bat
	export BAT_THEME="ansi"
	alias cat=bat

	# New commands
	function opend() { echo "$1"; cd "$1" && open-by-N.sh -i; cd -; }
	function loudfail() {
		set -E
		trap 'echo FAIL' ERR
	}

	# ccache
	command -v ccache &> /dev/null
	if [ "${?}" -eq 0 ]; then
		export PATH="${HOMEBREW_PREFIX}/opt/ccache/libexec:${PATH}"
	fi
fi

unset SI_GREP_ARGS

# ------------------- After OS Specific Aliases -------------------

function ip_where() { curl -s "ipinfo.io/${1}/json" | jq -r ".city, .region" | sed -z 's/\n/, /'; }
